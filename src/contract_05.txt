pragma solidity ^0.4.0;
contract Network {
    
		// Declares a new complex type for a new vaccine
		struct vaccine {
			address patientID; //Primary key to identify patient
			uint batch; //Numerical 
			uint date; //Current block timestamp (block.timestamp) 
			bytes virus;  
			uint expiry; //Date - but will include some form of text character ie (09/11) 
			uint[] symptoms; 
		}
		
		//Declares a doctor structure to be inserted into the map
		struct doctor{
		    address doctorID; 
		    address[] patientID;
		}
		
	    //Map all patient to all treatment 
        mapping(address => vaccine[]) public patientVaccines;
        
        //Map all doctors to patients
        mapping(address => doctors[]) public approvedDoctors;
    
        /* Use case #1:
        /* 1) Check permission for doctor to check 
        /* 2) Add the treatment */
        function setTreatment(address patient, vaccine _newTreatment, uint patientID, uint batch, uint date, bytes virus, uint expiry, uint[] symptoms) internal returns (bool success){
            //Check doctor permission
            require(approvedDoctors[msg.sender].length != 0);
            /*require(
                for(int i = 0; i <= approvedDoctors[msg.sender].patientID.length; i++){
                     if(patient == approvedDoctors[msg.sender].patientID[i])
                         {
                             return true;
                         }
                    }
                return false;
             )*/
             
            //Construct a vaccine 
            this.doctor.patientID = patientID; 
			this.doctor.batch = batch; 
			this.doctor.date = date;  
			this.doctor.virus = virus;  
			this.doctor.expiry = expiry;  
			this.doctor.symptoms[] = symptoms[]; 
            }
        }
    
       /*Use case #2: Return a patients vaccine history */
     function returnVaccineHistory(address patientID) returns (history[]){
        //Create a blank array to be returned 
        history[];
        //Copy vaccines over to history array
            for (uint i = 0; i <= patientVaccines.length; i++){
         		if (patientVaccines[i].patientID == patientID){
          		    history.add(patientVaccines[i].patientID); 
         		}
         	   return history[];
        }
        
        /* Use case #3: Return patients in a certain batch */
        function getBatch(uint batchNo) returns (patientBatch[]){
            batch[]; 
            
            for (uint i = 0; i <= patientVaccines.length; i++){
                if(patientVaccines[i].batchNo = batchNo){
                    batch.add(patientVaccines[i].batchNo);
                }
            }
            
            return batch[];
        }
    
}